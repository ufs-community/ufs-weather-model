pipeline {
  agent none
  stages {
    stage('Clone on Hera') {
       agent {
        label 'built-in'   
       }
      steps {
        script {
          for (label in pullRequest.labels) {
            if ((label.matches("jenkins-ort"))) {
                 env.CHOICE_NODE='Hera'
            }  
            else { 
                env.CHOICE_NODE='none'
            }
       }    
    }
  } 
  stage('Run ORT script') {
        agent {
          label "${CHOICE_NODE}"
               cleanWs()
               checkout scm
               script {
                 try {
                    echo "Running on ${nodeLabel}"
                    if ((label.matches("jenkins-ort"))) {
                       sh '''
                       git submodule update --init --recursive
                       cd tests
		       pwd
		       export BL_DATE=$(cat bl_date.conf | cut -d '=' -f2)
                       export machine=Hera
                       export PATH=$PATH:~/bin
                       echo $CHANGE_ID
                       export SSH_ORIGIN=$(curl --silent https://api.github.com/repos/ufs-community/ufs-weather-model/pulls/$CHANGE_ID | jq -r '.head.repo.ssh_url')
                       export FORK_BRANCH=$(curl --silent https://api.github.com/repos/ufs-community/ufs-weather-model/pulls/$CHANGE_ID | jq -r '.head.ref')
                         
                          if [[ $machine =~ "Hera" ]]
                          then
                            echo "Running ORT"
                            sed "s|intel|gnu|g" -i opnReqTest
                            export ACCNR=epic
                            ./opnReqTest -n control_p8 -a ${ACCNR} -c std,bit,dbg,dcp,rst,mpi,thr
                            cd logs/
                            cp OpnReqTests_control_p8_hera.log /scratch2/NAGAPE/epic/role.epic/jenkins/workspace
                            cd ..
                            ./opnReqTest -n regional_control -a ${ACCNR} -c bit,dcp,thr
                            cd logs/
                            cp OpnReqTests_regional_control_hera.log /scratch2/NAGAPE/epic/role.epic/jenkins/workspace
                            cd ..
                            ./opnReqTest -n cpld_control_nowave_noaero_p8 -a ${ACCNR} -c dbg,rst
			    cd logs/
                            cp OpnReqTests_cpld_control_nowave_noaero_p8_hera.log /scratch2/NAGAPE/epic/role.epic/jenkins/workspace
                            git remote -v
                            git fetch --no-recurse-submodules origin
                            git reset FETCH_HEAD --hard
                            cd .. && cd .. && cd ..
			    cp OpnReqTests_control_p8_hera.log $WORKSPACE/tests/logs/
                            cp OpnReqTests_regional_control_hera.log $WORKSPACE/tests/logs/
                            cp OpnReqTests_cpld_control_nowave_noaero_p8_hera.log $WORKSPACE/tests/logs/
                            cd $WORKSPACE/tests/
                            else
                            echo "exit"
                          fi
                      git config user.email "ecc.platform@noaa.gov"
                      git config user.name "epic-cicd-jenkins"
                      echo "Testing concluded...removing labels for $machine from $GIT_URL"

                      export machine_name_logs=$(echo $machine | awk '{ print tolower($1) }')
                      git remote -v | grep -w sshorigin > /dev/null 2>&1 && git remote remove sshorigin > /dev/null 2>&1
                      git remote add sshorigin $SSH_ORIGIN > /dev/null 2>&1
                      git add logs/OpnReqTests_control_p8_hera.log logs/OpnReqTests_regional_control_hera.log logs/OpnReqTests_cpld_control_nowave_noaero_p8_hera.log
                      git commit -m "ORT Jobs Completed.\n\n\n on-behalf-of @ufs-community <ecc.platform@noaa.gov>"
                      git pull sshorigin $FORK_BRANCH
                      git push sshorigin HEAD:$FORK_BRANCH
                       
                      tar --create --gzip --verbose --dereference --file "${machine_name_logs}.tgz" ${WORKSPACE}/tests/logs/*.log
  
                      GIT_OWNER=$(echo $GIT_URL | cut -d '/' -f4)
                      GIT_REPO_NAME=$(echo $GIT_URL | cut -d '/' -f5 | cut -d '.' -f1)

                      curl --silent -X DELETE -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${GITHUB_TOKEN}"  https://api.github.com/repos/${GIT_OWNER}/${GIT_REPO_NAME}/issues/${CHANGE_ID}/labels/$machine-BL
                      '''
                      s3Upload consoleLogLevel: 'INFO', dontSetBuildResultOnFailure: false, dontWaitForConcurrentBuildCompletion: false, entries: [[bucket: 'noaa-epic-prod-jenkins-artifacts', excludedFile: '', flatten: true, gzipFiles: false, keepForever: false, managedArtifacts: true, noUploadOnFailure: false, selectedRegion: 'us-east-1', showDirectlyInBrowser: false, sourceFile: "**/*tgz*", storageClass: 'STANDARD', uploadFromSlave: false, useServerSideEncryption: false]], pluginFailureResultConstraint: 'FAILURE', profileName: 'main', userMetadata: []
                    }
                 }
               }
            }
            }
        }
                    }
def parallelStagesMap = modifiedLabels.collectEntries {
    ["${it}" : generateStage(it)]
}

pipeline {
    agent none
    environment {
        ACCNR = 'epic'
        AWS_PROD_ACCOUNT_ID = credentials('AWS_PROD_ACCOUNT_ID')
        AWS_PROD_SNS_TOPIC = credentials('AWS_PROD_SNS_TOPIC')
        GITHUB_TOKEN = credentials('GithubJenkinsNew')
        GIT_URL = 'https://github.com/ufs-community/ufs-weather-model.git'
    }
    stages {
        stage('Run SonarQube Testing') {
            steps {
                script {
                    build job: '/ufs-weather-model/ufs-wm-sonarqube', parameters: [
                        string(name: 'BRANCH_NAME', value: env.CHANGE_BRANCH ?: 'develop'),
                        string(name: 'FORK_NAME', value: env.CHANGE_FORK ?: '')
                    ], wait: false
                }
            }
        }
        stage('Run Regression Tests in Parallel') {
            steps {
                script {
                    parallel parallelStagesMap
                }
            }
        }       
    }   
        post {
         success {
             node('built-in') {
                echo 'This will run only if successful.'
                sh '''
                  aws sns publish --topic-arn "arn:aws:sns:us-east-1:${AWS_PROD_ACCOUNT_ID}:${AWS_PROD_SNS_TOPIC}" --region us-east-1 --message '{"version":"1.0","source":"custom","content":{"description":":sunny: Jenkins build *'"$JOB_NAME"' '"$BUILD_NUMBER"'* with *PR-'"$CHANGE_ID"'*  *succeeded*"}}'
               '''
             }
         }
         failure {
             node('built-in') {
                echo 'This will run only if the run was marked as unstable.'
                sh '''
                  aws sns publish --topic-arn "arn:aws:sns:us-east-1:${AWS_PROD_ACCOUNT_ID}:${AWS_PROD_SNS_TOPIC}" --region us-east-1 --message '{"version":"1.0","source":"custom","content":{"description":":warning: Jenkins build *'"$JOB_NAME"' '"$BUILD_NUMBER"'* with *PR-'"$CHANGE_ID"'*  *failed!*"}}'
               '''
             }
         }
     } 
  }
}
